const { validationResult } = require('express-validator');
const fs = require('fs');
const path = require('path');
const io = require('../socket');

const Post = require('../models/post');

exports.getPosts = (req, res, next) => {
    const currentPage = req.query.page || 1,
          itemsPerPage = 3;
    let totalItems = 0;

    Post.find()
        .countDocuments()
        .then(numOfPosts => {
            totalItems = numOfPosts;
            return Post
                .find()
                .skip((currentPage - 1) * itemsPerPage)
                .limit(itemsPerPage) // pagination
        })
        .then(posts => {
            res
            .status(200)
            .json({
                posts,
                totalItems
            })
        })
        .catch(err => {
            if (err.statusCode) {
                err.statusCode = 500;
            }
            next(err);
        });
}

exports.createPost = (req, res, next) => {

    const errors = validationResult(req);

    if (!errors.isEmpty()) {
        const error = new Error('Validation failed');
        error.statusCode = 422;
        error.data = errors.array();
        throw error;
    }

    if (!req.file) {
        const error = new Error('Missing required image');
        error.statusCode = 422;
        throw error;
    }

    const imageUrl = req.file.path; // Generated by multer

    const title = req.body.title,
          content = req.body.content,
          userId = req.userId;

    const post = new Post({
        title,
        content,
        imageUrl,
        creator: userId,
    })
    post.save()
        .then(document => {
            io.getIo().emit('posts', {
                post: document,
                action: 'create'
            })
            res.status(201).json({
                message: 'Post created',
                post: document
            });
        })
        .catch(err => {
            if (err.statusCode) {
                err.statusCode = 500;
            }
            next(err);
        })
}

exports.getPost = (req, res, next) => {
    const postId = req.params.postId;

    Post.findById(postId)
        .then(post => {
            if (!post) {
                const error = new Error('Post not found');
                error.statusCode = 404;
                throw error;
            }
            res.status(200).json({
                post
            })
        })
        .catch(err => {
            if (err.statusCode) {
                err.statusCode = 500;
            }
            next(err);
        })

}

exports.updatePost = (req, res, next) => {
    const postId = req.params.postId;
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        const error = new Error('Validation failed');
        error.statusCode = 422;
        throw error;
    }
    const title = req.body.title,
          content = req.body.content;
    let imageUrl = req.body.image;
    if (req.file) { // incase a user uploaded an image. Multer provides us with a path
        imageUrl = req.file.path;
    }
    if (!imageUrl) {
        const error = new Error('Missing post image.');
        error.statusCode = 422;
        throw error;
    }

    Post.findById(postId)
        .then(document => {
            if (!document) {
                const error = new Error('Post not found');
                error.statusCode = 404;
                throw error;
            }
            if (imageUrl !== document.imageUrl) {
                clearImage(document.imageUrl);
            }
            document.title = title;
            document.content = content;
            document.imageUrl = imageUrl;
            return document.save()
        })
        .then(result => {
            res.status(200).json({
                message: 'Post updated successfully',
                post: result
            })
        })
        .catch(err => {
            if (err.statusCode) {
                err.statusCode = 500;
            }
            next(err);
        });
}

exports.deletePost = (req, res, next) => {
    const postId = req.params.postId;

    Post.findById(postId)
        .then(document => {
            if (!document) {
                const error = new Error('Post not found');
                error.statusCode = 404;
                throw error;
            }
            clearImage(document.imageUrl);
            return Post.findByIdAndRemove(postId);
        })
        .then(results => {
            res.status(200)
                .json({
                    message: 'Post was deleted.'
                })
        })
        .catch(err => {
            if (err.statusCode) {
                err.statusCode = 500;
            }
            next(err);
        });
}

const clearImage = filePath => {
    filePath = path.join(__dirname, '..', filePath);
    fs.unlink(filePath, err => {
        console.log('Error deleting file', err);
    });
};
